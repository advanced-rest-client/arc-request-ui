/* eslint-disable class-methods-use-this */
import { LitElement, html } from 'lit-element';
import { ArcResizableMixin } from '@advanced-rest-client/arc-resizable-mixin';
import { EventsTargetMixin } from '@advanced-rest-client/events-target-mixin';
import { TransportEventTypes } from '@advanced-rest-client/arc-events';
import '@advanced-rest-client/arc-response/response-view.js';
import elementStyles from './styles/Panel.js';
import '../arc-request-editor.js';

/** @typedef {import('@advanced-rest-client/arc-types').ArcRequest.ArcEditorRequest} ArcEditorRequest */
/** @typedef {import('@advanced-rest-client/arc-types').ArcRequest.TransportRequest} TransportRequest */
/** @typedef {import('@advanced-rest-client/arc-types').ArcRequest.ArcBaseRequest} ArcBaseRequest */
/** @typedef {import('@advanced-rest-client/arc-types').ArcResponse.Response} ArcResponse */
/** @typedef {import('@advanced-rest-client/arc-types').ArcResponse.ErrorResponse} ErrorResponse */
/** @typedef {import('@advanced-rest-client/arc-events').ApiRequestEvent} ApiRequestEvent */
/** @typedef {import('@advanced-rest-client/arc-events').ApiResponseEvent} ApiResponseEvent */
/** @typedef {import('./ArcRequestEditorElement').ArcRequestEditorElement} ArcRequestEditorElement */
/** @typedef {import('lit-element').TemplateResult} TemplateResult */

export const requestEditorTemplate = Symbol('requestEditorTemplate');
export const responseTemplate = Symbol('requestEditorTemplate');
export const loaderTemplate = Symbol('loaderTemplate');
export const requestTransportHandler = Symbol('requestTransportHandler');
export const responseTransportHandler = Symbol('responseTransportHandler');
export const responseClearHandler = Symbol('responseClearHandler');
export const requestChangeHandler = Symbol('requestChangeHandler');

export class ArcRequestPanelElement extends EventsTargetMixin(ArcResizableMixin(LitElement)) {
  static get styles() {
    return elementStyles;
  }

  static get properties() {
    return { 
      /** 
       * The ARC request object
       */
      editorRequest: { type: Object },
      /**
       * Computed value. If true then the request is loading.
       * This resets each time the request status changes.
       */
      loading: { type: Boolean },
      /**
       * Redirect URL for the OAuth2 authorization.
       * If can be also set by dispatching `oauth2-redirect-url-changed`
       * with `value` property on the `detail` object.
       */
      oauth2RedirectUri: { type: String },
      /**
       * When set it will ignore all `content-*` headers when the request method
       * is either `GET` or `HEAD`.
       * When not set or `false` it renders warning dialog.
       */
      ignoreContentOnGet: { type: Boolean },
      /**
       * Enables compatibility with Anypoint platform
       */
      compatibility: { type: Boolean },
      /**
       * Enables material's outlined theme for inputs.
       */
      outlined: { type: Boolean },
      /** 
       * The request object generated by the transport library with the final request 
       * being transported to the endpoint.
       */
      transportedRequest: { type: Object },
      /** 
       * The response generated by the transport library
       */
      response: { type: Object },
    };
  }

  /**
   * @return {ArcRequestEditorElement} Reference to ArcRequestEditorElement element.
   */
  get editor() {
    return this.shadowRoot.querySelector('arc-request-editor');
  }

  constructor() {
    super();
    /**
     * @type {ArcEditorRequest}
     */
    this.editorRequest = undefined;
    /**
     * @type {TransportRequest}
     */
    this.transportedRequest = undefined;
    /**
     * @type {ArcResponse|ErrorResponse}
     */
    this.response = undefined;
    this.loading = false;
    this.ignoreContentOnGet = false;
    this.compatibility = false;
    this.outlined = false;
    /**
     * @type {string}
     */
    this.oauth2RedirectUri = undefined;

    this[requestTransportHandler] = this[requestTransportHandler].bind(this);
    this[responseTransportHandler] = this[responseTransportHandler].bind(this);
  }

  /**
   * @param {EventTarget} node
   */
  _attachListeners(node) {
    super._attachListeners(node);
    node.addEventListener(TransportEventTypes.request, this[requestTransportHandler]);
    node.addEventListener(TransportEventTypes.response, this[responseTransportHandler]);
  }

  /**
   * @param {EventTarget} node
   */
  _detachListeners(node) {
    super._detachListeners(node);
    node.removeEventListener(TransportEventTypes.request, this[requestTransportHandler]);
    node.removeEventListener(TransportEventTypes.response, this[responseTransportHandler]);
  }

  /**
   * Runs current request.
   * Note, it does not validate the state of the request.
   */
  send() {
    this.editor.send();
  }

  // /**
  //  * Calls abort on the request editor.
  //  */
  // abort() {
  //   this.editor.abort();
  // }

  /**
   * Calls `clearRequest()` method of the `request-editor`
   */
  clear() {
    this.editor.reset();
  }

  /**
   * A handler for the request being executed. If the request id corresponds to this requests id then it sets the `loading` property to `true`
   * A request transport event may not be initialized from within the request editor (from actions or modules, for example) so this listens on
   * all events.
   * 
   * @param {ApiRequestEvent} e
   */
  [requestTransportHandler](e) {
    const { id } = e.detail;
    const { editorRequest } = this;
    if (!editorRequest || editorRequest.id !== id) {
      return;
    }
    this.loading = true;
  }

  /**
   * A handler for the api response event dispatched by the request engine.
   * @param {ApiResponseEvent} e
   */
  [responseTransportHandler](e) {
    const { id, response, request } = e.detail;
    const { editorRequest } = this;
    if (!editorRequest || editorRequest.id !== id) {
      return;
    }
    this.transportedRequest = request;
    this.response = response;
    this.loading = false;
  }

  [responseClearHandler]() {
    this.transportedRequest = undefined;
    this.response = undefined;
  }

  /**
   * A handler for the request property change in the request editor. It updates the `editorRequest` property.
   * @param {Event} e
   */
  [requestChangeHandler](e) {
    const editor = /** @type ArcRequestEditorElement */ (e.target);
    this.editorRequest = editor.serialize();
  }

  render() {
    return html`
    ${this[requestEditorTemplate]()}
    ${this[loaderTemplate]()}
    ${this[responseTemplate]()}
    `
  }

  /**
   * @returns {TemplateResult} The template for the request editor view
   */
  [requestEditorTemplate]() {
    const { compatibility, oauth2RedirectUri } = this;
    const editorRequest = /** @type ArcEditorRequest */ (this.editorRequest || {});
    const { id } = editorRequest;
    const request = /** @type ArcBaseRequest */ (editorRequest.request || {});
    const { method, ui, url, actions, payload, authorization, config, headers } = request;
    return html`
    <arc-request-editor
      ?compatibility="${compatibility}"
      .requestId="${id}"
      .url="${url}"
      .method="${method}"
      .headers="${headers}"
      .responseActions="${actions && actions.response}"
      .requestActions="${actions && actions.request}"
      .payload="${payload}"
      .authorization="${authorization}"
      .uiConfig="${ui}"
      .config="${config}"
      .oauth2RedirectUri="${oauth2RedirectUri}"
      @change="${this[requestChangeHandler]}"
    ></arc-request-editor>
    `;
  }

  /**
   * @returns {TemplateResult} The template for the response view
   */
  [responseTemplate]() {
    const { transportedRequest, response } = this;
    return html`
    <response-view
      .response="${response}"
      .request="${transportedRequest}"
      @clear="${this[responseClearHandler]}"
    ></response-view>
    `;
  }

  /**
   * @returns {TemplateResult|string} The template for the request loader
   */
  [loaderTemplate]() {
    if (!this.loading) {
      return '';
    }
    return html`
    <progress class="loading-progress"></progress>
    `;
  }
}
